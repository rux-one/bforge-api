#!/usr/bin/env node

import WebSocket from 'ws';
import { parse as parseUrl } from 'url';
import fetch from 'node-fetch';
import { Cookie, CookieJar } from 'tough-cookie';
import yargs from 'yargs';
import { hideBin } from 'yargs/helpers';

interface SessionCookies {
    'connect.sid': string;
    'loginstate': string;
    'indent_type': string;
    'space_units': string;
    'keymap': string;
}

interface DocData {
    str: string;
    revision: number;
}

interface SocketMessage {
    type: string;
    data?: any[];
}

interface HandshakeData {
    pingInterval: number;
    [key: string]: any;
}

async function getSessionCookie(server: string): Promise<SessionCookies> {
    const url = `https://${server}`;
    const response = await fetch(url);
    const cookies = response.headers.get('set-cookie') || '';
    const cookieJar = new CookieJar();
    
    // Parse the cookies
    cookies.split(',').forEach(cookie => {
        try {
            const parsedCookie = Cookie.parse(cookie);
            if (parsedCookie) {
                cookieJar.setCookieSync(parsedCookie, url);
            }
        } catch (e) {
            console.error('Error parsing cookie:', e);
        }
    });

    const connectSid = cookieJar.getCookiesSync(url)
        .find(cookie => cookie.key === 'connect.sid')?.value || '';

    return {
        'connect.sid': connectSid,
        'loginstate': 'true',
        'indent_type': 'space',
        'space_units': '4',
        'keymap': 'vim'
    };
}

function decodeSocketIoMessage(message: string): [string | null, any[] | null] {
    console.log(`\nDecoding message: ${message}`);
    if (message.startsWith('42')) {
        try {
            const data = JSON.parse(message.slice(2));
            console.log(`Parsed message data: ${JSON.stringify(data, null, 2)}`);
            return [data[0], data.slice(1)];
        } catch (error) {
            console.error('Error parsing message:', error);
            return [null, null];
        }
    }
    return [null, null];
}

async function sendPing(ws: WebSocket, interval: number): Promise<void> {
    const timer = setInterval(() => {
        try {
            if (ws.readyState === WebSocket.OPEN) {
                ws.send('2');
                console.log('Ping sent');
            } else {
                clearInterval(timer);
            }
        } catch (error) {
            clearInterval(timer);
            if (error instanceof Error && error.message.includes('CLOSED')) {
                return;
            }
        }
    }, interval);

    return new Promise((resolve) => {
        ws.on('close', () => {
            clearInterval(timer);
            resolve();
        });
    });
}

async function appendToNote(
    websocketUrl: string,
    noteId: string,
    textToAppend: string,
    cookies: SessionCookies
): Promise<void> {
    console.log(`\nConnecting to WebSocket URL: ${websocketUrl}`);

    const headers = {
        'Pragma': 'no-cache',
        'Cache-Control': 'no-cache',
        'Origin': `https://${parseUrl(websocketUrl).host}`,
        'User-Agent': 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/131.0.0.0 Safari/537.36',
        'Accept-Language': 'en-GB,en-US;q=0.9,en;q=0.8',
        'Cookie': Object.entries(cookies)
            .filter(([_, v]) => v)
            .map(([k, v]) => `${k}=${v}`)
            .join('; '),
    };

    let currentContent = '';
    let currentRevision = 0;

    const ws = new WebSocket(websocketUrl, {
        headers,
        perMessageDeflate: false,
    });

    return new Promise((resolve, reject) => {
        const startTime = Date.now();
        const TIMEOUT = 3000; // 3 seconds timeout
        let operationSent = false;

        ws.on('open', () => {
            console.log('\nStarting Socket.IO handshake...');
            ws.send('40');
        });

        ws.on('message', async (wsData: Buffer) => {
            const response = wsData.toString();
            console.log(`Received: ${response}`);

            // Check timeout
            if (Date.now() - startTime > TIMEOUT) {
                console.log('Timeout waiting for operation acknowledgment');
                ws.close();
                resolve();
                return;
            }

            if (response.startsWith('0')) {
                try {
                    const handshakeData: HandshakeData = JSON.parse(response.slice(1));
                    console.log(`Handshake data: ${JSON.stringify(handshakeData)}`);

                    console.log('Sending probe message...');
                    ws.send('2probe');

                    if (handshakeData.pingInterval) {
                        console.log('Setting up ping interval...');
                        // Don't await this as it resolves on connection close
                        sendPing(ws, handshakeData.pingInterval / 1000);
                    }
                } catch (error) {
                    console.error('Failed to parse handshake data');
                    ws.close();
                    reject(error);
                    return;
                }

                const joinMessage = `42["join","${noteId}"]`;
                console.log(`\nSending join message: ${joinMessage}`);
                ws.send(joinMessage);
                return;
            }

            const [msgType, msgData] = decodeSocketIoMessage(response);
            console.log(`Message type: ${msgType}, Data: ${JSON.stringify(msgData)}`);

            if (msgType === 'error') {
                console.log(`Received error: ${msgData}`);
                ws.close();
                reject(new Error(`Server error: ${msgData}`));
                return;
            }

            if (msgType === 'doc' && msgData && !operationSent) {
                operationSent = true;
                const docData = msgData[0] as unknown as DocData;
                currentContent = docData.str;
                currentRevision = docData.revision;
                console.log(`Current content: ${currentContent}`);
                console.log(`Current revision: ${currentRevision}`);

                const retainLength = currentContent.length;
                let operationMessage: string;

                if (retainLength === 0) {
                    operationMessage = `42["operation",${currentRevision},["${textToAppend}"],{"ranges":[{"anchor":${textToAppend.length},"head":${textToAppend.length}}]}]`;
                } else {
                    operationMessage = `42["operation",${currentRevision},[${retainLength},"${textToAppend}"],{"ranges":[{"anchor":${retainLength + textToAppend.length},"head":${retainLength + textToAppend.length}}]}]`;
                }

                console.log(`\nSending operation message: ${operationMessage}`);
                ws.send(operationMessage);
                return;
            }

            if (msgType === 'operation') {
                console.log('Operation acknowledged');
                ws.close();
                resolve();
                return;
            }

            // Keep handling pings while waiting
            if (response === '3') {  // ping from server
                ws.send('2');  // respond with pong
            }

            if (response.startsWith('44')) {
                console.log('Authentication failed');
                ws.close();
                reject(new Error('Authentication failed'));
                return;
            }
        });

        ws.on('error', (error) => {
            console.error('WebSocket error:', error);
            ws.close();
            reject(error);
        });

        ws.on('close', () => {
            console.log('WebSocket connection closed');
            resolve();
        });
    });
}

async function overrideNote(
    websocketUrl: string,
    noteId: string,
    newContent: string,
    cookies: SessionCookies
): Promise<void> {
    console.log(`\nConnecting to WebSocket URL: ${websocketUrl}`);
    
    const headers = {
        'Pragma': 'no-cache',
        'Cache-Control': 'no-cache',
        'Origin': `https://${parseUrl(websocketUrl).host}`,
        'User-Agent': 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/131.0.0.0 Safari/537.36',
        'Accept-Language': 'en-GB,en-US;q=0.9,en;q=0.8',
        'Cookie': Object.entries(cookies)
            .filter(([_, v]) => v)
            .map(([k, v]) => `${k}=${v}`)
            .join('; '),
    };

    const ws = new WebSocket(websocketUrl, {
        headers,
        perMessageDeflate: false,
    });

    return new Promise((resolve, reject) => {
        const startTime = Date.now();
        const TIMEOUT = 3000; // 3 seconds timeout
        let operationSent = false;

        ws.on('open', () => {
            console.log('\nStarting Socket.IO handshake...');
            ws.send('40');
        });

        ws.on('message', async (wsData: Buffer) => {
            const response = wsData.toString();
            console.log(`Received: ${response}`);

            // Check timeout
            if (Date.now() - startTime > TIMEOUT) {
                console.log('Timeout waiting for operation acknowledgment');
                ws.close();
                resolve();
                return;
            }

            if (response.startsWith('0')) {
                try {
                    const handshakeData: HandshakeData = JSON.parse(response.slice(1));
                    console.log(`Handshake data: ${JSON.stringify(handshakeData)}`);

                    console.log('Sending probe message...');
                    ws.send('2probe');

                    if (handshakeData.pingInterval) {
                        console.log('Setting up ping interval...');
                        sendPing(ws, handshakeData.pingInterval / 1000);
                    }
                } catch (error) {
                    console.error('Failed to parse handshake data');
                    ws.close();
                    reject(error);
                    return;
                }

                const joinMessage = `42["join","${noteId}"]`;
                console.log(`\nSending join message: ${joinMessage}`);
                ws.send(joinMessage);
                return;
            }

            const [msgType, msgData] = decodeSocketIoMessage(response);
            console.log(`Message type: ${msgType}, Data: ${JSON.stringify(msgData)}`);

            if (msgType === 'error') {
                console.log(`Received error: ${msgData}`);
                ws.close();
                reject(new Error(`Server error: ${msgData}`));
                return;
            }

            if (msgType === 'doc' && msgData && !operationSent) {
                operationSent = true;
                const docData = msgData[0] as unknown as DocData;
                const currentRevision = docData.revision;
                console.log(`Current revision: ${currentRevision}`);
                console.log(`Current content length: ${docData.str.length}`);
                console.log(`Current content: "${docData.str}"`);

                if (docData.str.length > 0) {
                    // First send selection message to select all content
                    const selectionMessage = `42${JSON.stringify(["selection", {"ranges":[{"anchor":0,"head":docData.str.length}]}])}`;
                    console.log(`\nSending selection message: ${selectionMessage}`);
                    ws.send(selectionMessage);

                    // Send cursor activity message
                    const cursorMessage = `42${JSON.stringify(["cursor activity", {"line":0,"ch":docData.str.length,"sticky":null}])}`;
                    console.log(`\nSending cursor message: ${cursorMessage}`);
                    ws.send(cursorMessage);

                    // First delete all content, then add new content
                    const deleteOperation = ["operation", currentRevision, [-docData.str.length], {"ranges":[{"anchor":0,"head":0}]}];
                    const deleteMessage = `42${JSON.stringify(deleteOperation)}`;
                    console.log(`\nSending delete operation: ${deleteMessage}`);
                    ws.send(deleteMessage);

                    // Wait a bit before sending the insert operation
                    await new Promise(resolve => setTimeout(resolve, 100));

                    // Then insert new content
                    const insertOperation = ["operation", currentRevision + 1, [newContent], {"ranges":[{"anchor":newContent.length,"head":newContent.length}]}];
                    const insertMessage = `42${JSON.stringify(insertOperation)}`;
                    console.log(`\nSending insert operation: ${insertMessage}`);
                    ws.send(insertMessage);
                } else {
                    // For empty notes, just insert the new content
                    const insertOperation = ["operation", currentRevision, [newContent], {"ranges":[{"anchor":newContent.length,"head":newContent.length}]}];
                    const insertMessage = `42${JSON.stringify(insertOperation)}`;
                    console.log(`\nSending insert operation: ${insertMessage}`);
                    ws.send(insertMessage);
                }
                return;
            }

            if (msgType === 'operation') {
                console.log('Operation acknowledged');
                ws.close();
                resolve();
                return;
            }

            // Keep handling pings while waiting
            if (response === '3') {  // ping from server
                ws.send('2');  // respond with pong
            }

            if (response.startsWith('44')) {
                console.log('Authentication failed');
                ws.close();
                reject(new Error('Authentication failed'));
                return;
            }
        });

        ws.on('error', (error) => {
            console.error('WebSocket error:', error);
            ws.close();
            reject(error);
        });

        ws.on('close', () => {
            console.log('WebSocket connection closed');
            resolve();
        });
    });
}

async function main(): Promise<void> {
    const argv = await yargs(hideBin(process.argv))
        .option('server', {
            type: 'string',
            description: 'Server URL (e.g., hedgedoc.example.com)',
            demandOption: true,
        })
        .option('note-id', {
            type: 'string',
            description: 'ID of the note to append to',
            demandOption: true,
        })
        .option('text', {
            type: 'string',
            description: 'Text to append to the note',
            demandOption: true,
        })
        .option('clear', {
            type: 'boolean',
            description: 'Clear the note before adding new content',
            default: false,
        })
        .argv;

    // Remove any protocol prefix if present
    const server = argv.server.replace(/^(https?:\/\/|wss?:\/\/)/i, '');
    
    // Get session cookie
    const cookies = await getSessionCookie(server);
    console.log(`Got cookies: ${JSON.stringify(cookies)}`);
    
    // Construct the full WebSocket URL for the note using WSS
    const websocketUrl = `wss://${server}/socket.io/?noteId=${argv['note-id']}&EIO=3&transport=websocket`;
    
    if (argv.clear) {
        await overrideNote(websocketUrl, argv['note-id'], argv.text, cookies);
    } else {
        await appendToNote(websocketUrl, argv['note-id'], argv.text, cookies);
    }
}

if (require.main === module) {
    main().catch(error => {
        console.error('Error:', error);
        process.exit(1);
    });
}
